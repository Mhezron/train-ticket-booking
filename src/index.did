type Ticket = record {
  id : text;
  destination : text;
  seat_no : nat32;
  time : text;
  traveller : Traveller;
  boarding : text;
  train_id : text;
};
type TicketPayload = record {
  traveller_id : text;
  destination : text;
  time : text;
  boarding : text;
  train_id : text;
};
type Train = record {
  id : text;
  empty_seats : nat32;
  starting_point : text;
  time : text;
  stops : vec text;
  capacity : nat32;
};
type TrainPayload = record {
  starting_point : text;
  time : text;
  stops : vec text;
  capacity : opt nat32;
};
type TrainSearchPayload = record {
  destination : text;
  starting_point : text;
  time : text;
};
type Traveller = record { id : text; name : text; phone : text };
type TravellerPayload = record { name : text; phone : text };
type _AzleResult = variant { Ok : Ticket; Err : text };
type _AzleResult_1 = variant { Ok : Train; Err : text };
type _AzleResult_2 = variant { Ok : Traveller; Err : text };
type _AzleResult_3 = variant { Ok : vec Ticket; Err : text };
type _AzleResult_4 = variant { Ok : vec Train; Err : text };
type _AzleResult_5 = variant { Ok : vec Traveller; Err : text };
service : () -> {
  addTicket : (TicketPayload) -> (_AzleResult);
  addTrain : (TrainPayload) -> (_AzleResult_1);
  addTraveller : (TravellerPayload) -> (_AzleResult_2);
  getTicketById : (text) -> (_AzleResult) query;
  getTicketsPerTrain : (text) -> (_AzleResult_3) query;
  getTicketsPerTraveller : (text) -> (_AzleResult_3) query;
  getTrainById : (text) -> (_AzleResult_1) query;
  getTrainsEmptySeats : () -> (_AzleResult_4) query;
  getTravellerById : (text) -> (_AzleResult_2) query;
  getTravellersPerTrain : (text) -> (_AzleResult_5) query;
  searchTrain : (TrainSearchPayload) -> (_AzleResult_4) query;
  updateTrain : (text, TrainPayload) -> (_AzleResult_1);
}